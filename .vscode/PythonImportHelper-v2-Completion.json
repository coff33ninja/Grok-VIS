[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "jarvis_quips",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "alfred_quips",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "beatrice_quips",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "executor",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "persona",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "executor",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "memory_model",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "conn",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "tts",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "model",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "wake_word_handle",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "jarvis_quips",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "persona",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "persona",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "wake_word_handle",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "executor",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "persona",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "grokvis_run",
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "isExtraImport": true,
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "train_voice_model",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "wake_word_listener",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "setup_personality",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "speak",
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "isExtraImport": true,
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "store_memory",
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "isExtraImport": true,
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "handle_memory",
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "isExtraImport": true,
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "store_memory",
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "isExtraImport": true,
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "add_event",
        "importPath": "grokvis.scheduler",
        "description": "grokvis.scheduler",
        "isExtraImport": true,
        "detail": "grokvis.scheduler",
        "documentation": {}
    },
    {
        "label": "list_events",
        "importPath": "grokvis.scheduler",
        "description": "grokvis.scheduler",
        "isExtraImport": true,
        "detail": "grokvis.scheduler",
        "documentation": {}
    },
    {
        "label": "remove_event",
        "importPath": "grokvis.scheduler",
        "description": "grokvis.scheduler",
        "isExtraImport": true,
        "detail": "grokvis.scheduler",
        "documentation": {}
    },
    {
        "label": "wake_pc",
        "importPath": "grokvis.home_automation",
        "description": "grokvis.home_automation",
        "isExtraImport": true,
        "detail": "grokvis.home_automation",
        "documentation": {}
    },
    {
        "label": "control_device",
        "importPath": "grokvis.home_automation",
        "description": "grokvis.home_automation",
        "isExtraImport": true,
        "detail": "grokvis.home_automation",
        "documentation": {}
    },
    {
        "label": "check_device_status",
        "importPath": "grokvis.home_automation",
        "description": "grokvis.home_automation",
        "isExtraImport": true,
        "detail": "grokvis.home_automation",
        "documentation": {}
    },
    {
        "label": "get_weather",
        "importPath": "grokvis.weather",
        "description": "grokvis.weather",
        "isExtraImport": true,
        "detail": "grokvis.weather",
        "documentation": {}
    },
    {
        "label": "get_forecast",
        "importPath": "grokvis.weather",
        "description": "grokvis.weather",
        "isExtraImport": true,
        "detail": "grokvis.weather",
        "documentation": {}
    },
    {
        "label": "get_wikipedia_summary",
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "isExtraImport": true,
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "get_news_headlines",
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "isExtraImport": true,
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "get_word_definition",
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "isExtraImport": true,
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "translate_text",
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "isExtraImport": true,
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "tell_joke",
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "isExtraImport": true,
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "play_music",
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "isExtraImport": true,
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "get_movie_listings",
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "isExtraImport": true,
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "share_random_fact",
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "isExtraImport": true,
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "start_timer",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "start_stopwatch",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "stop_stopwatch",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "add_to_shopping_list",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "show_shopping_list",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "take_note",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "show_notes",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "location_reminder",
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "isExtraImport": true,
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "switch_persona",
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "isExtraImport": true,
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "adjust_volume",
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "isExtraImport": true,
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "sleep_mode",
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "isExtraImport": true,
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "isExtraImport": true,
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "is_sleeping",
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "isExtraImport": true,
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "launch_application",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "close_application",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "lock_computer",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "shutdown_computer",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "restart_computer",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "get_system_status",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "find_files",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "open_file",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "add_app_shortcut",
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "isExtraImport": true,
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "pynvml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pynvml",
        "description": "pynvml",
        "detail": "pynvml",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "TTS",
        "importPath": "TTS.api",
        "description": "TTS.api",
        "isExtraImport": true,
        "detail": "TTS.api",
        "documentation": {}
    },
    {
        "label": "TTS",
        "importPath": "TTS.api",
        "description": "TTS.api",
        "isExtraImport": true,
        "detail": "TTS.api",
        "documentation": {}
    },
    {
        "label": "TTS",
        "importPath": "TTS.api",
        "description": "TTS.api",
        "isExtraImport": true,
        "detail": "TTS.api",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyJobStore",
        "importPath": "apscheduler.jobstores.sqlalchemy",
        "description": "apscheduler.jobstores.sqlalchemy",
        "isExtraImport": true,
        "detail": "apscheduler.jobstores.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyJobStore",
        "importPath": "apscheduler.jobstores.sqlalchemy",
        "description": "apscheduler.jobstores.sqlalchemy",
        "isExtraImport": true,
        "detail": "apscheduler.jobstores.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "grokvis.web",
        "description": "grokvis.web",
        "isExtraImport": true,
        "detail": "grokvis.web",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "wakeonlan",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wakeonlan",
        "description": "wakeonlan",
        "detail": "wakeonlan",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "wikipedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wikipedia",
        "description": "wikipedia",
        "detail": "wikipedia",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "sounddevice",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sounddevice",
        "description": "sounddevice",
        "detail": "sounddevice",
        "documentation": {}
    },
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "OneClassSVM",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "OneClassSVM",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "pvporcupine",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pvporcupine",
        "description": "pvporcupine",
        "detail": "pvporcupine",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template_string",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template_string",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.bipartite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.bipartite",
        "description": "networkx.algorithms.bipartite",
        "detail": "networkx.algorithms.bipartite",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.approximation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.approximation",
        "description": "networkx.algorithms.approximation",
        "detail": "networkx.algorithms.approximation",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "process_command",
        "kind": 2,
        "importPath": "grokvis.commands",
        "description": "grokvis.commands",
        "peekOfCode": "def process_command(command):\n    \"\"\"Process the spoken command.\"\"\"\n    try:\n        if not command:\n            return\n        # Check if system is in sleep mode\n        if is_sleeping():\n            # Only respond to \"wake up\" command while sleeping\n            if \"wake up\" in command.lower():\n                from grokvis.system import sleep_until",
        "detail": "grokvis.commands",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "def setup_logging():\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(filename='grokvis_errors.log', level=logging.ERROR,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n# Global variables and initialization\ndef initialize_components():\n    \"\"\"Initialize core components of GrokVIS.\"\"\"\n    global memory_model, nlp, conn, executor, scheduler, persona\n    # Initialize core components\n    memory_model = SentenceTransformer('all-MiniLM-L6-v2')",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "initialize_components",
        "kind": 2,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "def initialize_components():\n    \"\"\"Initialize core components of GrokVIS.\"\"\"\n    global memory_model, nlp, conn, executor, scheduler, persona\n    # Initialize core components\n    memory_model = SentenceTransformer('all-MiniLM-L6-v2')\n    nlp = spacy.load(\"en_core_web_sm\")\n    pynvml.nvmlInit()\n    conn = sqlite3.connect(\"grokvis_memory.db\")\n    # tts will be initialized in setup_personality\n    executor = ThreadPoolExecutor(max_workers=2)  # Thread pool for async tasks",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "grokvis_run",
        "kind": 2,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "def grokvis_run():\n    \"\"\"Run the main GROK-VIS loop with wake word detection.\"\"\"\n    try:\n        # Setup logging\n        setup_logging()\n        # Initialize components\n        initialize_components()\n        # Import modules here to avoid circular imports\n        from grokvis.speech import speak, train_voice_model, wake_word_listener, setup_personality\n        from grokvis.web import app",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "memory_model",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "memory_model = None\nnlp = None\nconn = None\ntts = None\nexecutor = None\nscheduler = None\nmodel = None\nwake_word_handle = None\npersona = None\n# Personality quips",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "nlp = None\nconn = None\ntts = None\nexecutor = None\nscheduler = None\nmodel = None\nwake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "conn = None\ntts = None\nexecutor = None\nscheduler = None\nmodel = None\nwake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "tts",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "tts = None\nexecutor = None\nscheduler = None\nmodel = None\nwake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "executor",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "executor = None\nscheduler = None\nmodel = None\nwake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",\n    \"Consider it done. I'm here whenever you need me.\",",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "scheduler = None\nmodel = None\nwake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",\n    \"Consider it done. I'm here whenever you need me.\",\n    \"As you wish. Your wish is my command.\",",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "model = None\nwake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",\n    \"Consider it done. I'm here whenever you need me.\",\n    \"As you wish. Your wish is my command.\",\n    \"Executed with precision. What's next on the agenda?\"",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "wake_word_handle",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "wake_word_handle = None\npersona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",\n    \"Consider it done. I'm here whenever you need me.\",\n    \"As you wish. Your wish is my command.\",\n    \"Executed with precision. What's next on the agenda?\"\n]",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "persona",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "persona = None\n# Personality quips\nalfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",\n    \"Consider it done. I'm here whenever you need me.\",\n    \"As you wish. Your wish is my command.\",\n    \"Executed with precision. What's next on the agenda?\"\n]\nbeatrice_quips = [",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "alfred_quips",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "alfred_quips = [\n    \"At your service, sir. How else may I assist?\",\n    \"Task complete. Shall I prepare anything else?\",\n    \"Consider it done. I'm here whenever you need me.\",\n    \"As you wish. Your wish is my command.\",\n    \"Executed with precision. What's next on the agenda?\"\n]\nbeatrice_quips = [\n    \"All done with elegance. What else can I help with?\",\n    \"Task completed gracefully. Anything else?\",",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "beatrice_quips",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "beatrice_quips = [\n    \"All done with elegance. What else can I help with?\",\n    \"Task completed gracefully. Anything else?\",\n    \"Consider it handled. I'm here for whatever you need next.\",\n    \"Done with a touch of class. What would you like now?\",\n    \"Finished with finesse. How else may I assist you today?\"\n]\n# Default quips (will be replaced based on persona)\njarvis_quips = alfred_quips\n# Initialize logging",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "jarvis_quips",
        "kind": 5,
        "importPath": "grokvis.core",
        "description": "grokvis.core",
        "peekOfCode": "jarvis_quips = alfred_quips\n# Initialize logging\ndef setup_logging():\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(filename='grokvis_errors.log', level=logging.ERROR,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n# Global variables and initialization\ndef initialize_components():\n    \"\"\"Initialize core components of GrokVIS.\"\"\"\n    global memory_model, nlp, conn, executor, scheduler, persona",
        "detail": "grokvis.core",
        "documentation": {}
    },
    {
        "label": "tell_joke",
        "kind": 2,
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "peekOfCode": "def tell_joke():\n    \"\"\"Tell a random joke from the JokeAPI.\"\"\"\n    try:\n        # Get a random joke from the JokeAPI\n        url = \"https://v2.jokeapi.dev/joke/Programming,Miscellaneous,Pun?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=twopart\"\n        response = requests.get(url)\n        joke_data = response.json()\n        if joke_data['error']:\n            # Fallback to a built-in joke if the API fails\n            jokes = [",
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "play_music",
        "kind": 2,
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "peekOfCode": "def play_music(genre=None):\n    \"\"\"Simulate playing music of a specific genre.\"\"\"\n    try:\n        genres = {\n            \"rock\": [\"Queen\", \"Led Zeppelin\", \"AC/DC\", \"The Beatles\"],\n            \"pop\": [\"Taylor Swift\", \"Ed Sheeran\", \"Ariana Grande\", \"Justin Bieber\"],\n            \"jazz\": [\"Miles Davis\", \"John Coltrane\", \"Ella Fitzgerald\", \"Louis Armstrong\"],\n            \"classical\": [\"Mozart\", \"Beethoven\", \"Bach\", \"Chopin\"],\n            \"hip hop\": [\"Kendrick Lamar\", \"Drake\", \"Jay-Z\", \"Eminem\"],\n            \"electronic\": [\"Daft Punk\", \"Deadmau5\", \"Calvin Harris\", \"Skrillex\"]",
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "get_movie_listings",
        "kind": 2,
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "peekOfCode": "def get_movie_listings(location=\"nearby\"):\n    \"\"\"Get movie listings for theaters in the area.\"\"\"\n    try:\n        # This would normally use a real movie API\n        # For demonstration, we'll use mock data\n        movies = [\n            {\"title\": \"The Matrix Resurrections\", \"rating\": \"PG-13\", \"showtime\": \"7:30 PM\"},\n            {\"title\": \"Spider-Man: No Way Home\", \"rating\": \"PG-13\", \"showtime\": \"6:15 PM, 9:00 PM\"},\n            {\"title\": \"Dune\", \"rating\": \"PG-13\", \"showtime\": \"5:45 PM, 8:30 PM\"},\n            {\"title\": \"No Time to Die\", \"rating\": \"PG-13\", \"showtime\": \"7:00 PM\"},",
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "share_random_fact",
        "kind": 2,
        "importPath": "grokvis.entertainment",
        "description": "grokvis.entertainment",
        "peekOfCode": "def share_random_fact():\n    \"\"\"Share a random interesting fact.\"\"\"\n    try:\n        # Get a random fact from the uselessfacts API\n        url = \"https://uselessfacts.jsph.pl/random.json?language=en\"\n        response = requests.get(url)\n        fact_data = response.json()\n        if 'text' in fact_data:\n            fact = fact_data['text']\n            speak(f\"Here's a random fact: {fact}\")",
        "detail": "grokvis.entertainment",
        "documentation": {}
    },
    {
        "label": "wake_pc",
        "kind": 2,
        "importPath": "grokvis.home_automation",
        "description": "grokvis.home_automation",
        "peekOfCode": "def wake_pc(mac_address=\"YOUR_PC_MAC\"):\n    \"\"\"Wake a PC using Wake-on-LAN.\"\"\"\n    try:\n        wakeonlan.send_magic_packet(mac_address)\n        speak(\"PC waking up. Don't fry it.\")\n    except Exception as e:\n        logging.error(f\"Wake-on-LAN Error: {e}\")\n        speak(\"Sorry, I couldn't wake the PC.\")\ndef control_device(device, action):\n    \"\"\"Simulate controlling a smart device.\"\"\"",
        "detail": "grokvis.home_automation",
        "documentation": {}
    },
    {
        "label": "control_device",
        "kind": 2,
        "importPath": "grokvis.home_automation",
        "description": "grokvis.home_automation",
        "peekOfCode": "def control_device(device, action):\n    \"\"\"Simulate controlling a smart device.\"\"\"\n    try:\n        speak(f\"{action}ing the {device}. Need more?\")\n    except Exception as e:\n        logging.error(f\"Device Control Error: {e}\")\n        speak(\"Sorry, I couldn't control the device.\")\ndef check_device_status(device):\n    \"\"\"Check if a device is online by attempting to connect to its IP.\"\"\"\n    try:",
        "detail": "grokvis.home_automation",
        "documentation": {}
    },
    {
        "label": "check_device_status",
        "kind": 2,
        "importPath": "grokvis.home_automation",
        "description": "grokvis.home_automation",
        "peekOfCode": "def check_device_status(device):\n    \"\"\"Check if a device is online by attempting to connect to its IP.\"\"\"\n    try:\n        # This is a placeholder - in a real implementation, you would use the device's actual IP\n        device_ip = {\n            \"tv\": \"192.168.1.100\",\n            \"lights\": \"192.168.1.101\",\n            \"thermostat\": \"192.168.1.102\"\n        }.get(device.lower(), None)\n        if not device_ip:",
        "detail": "grokvis.home_automation",
        "documentation": {}
    },
    {
        "label": "get_wikipedia_summary",
        "kind": 2,
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "peekOfCode": "def get_wikipedia_summary(topic, sentences=2):\n    \"\"\"Get a summary of a topic from Wikipedia.\"\"\"\n    try:\n        # Search for the topic\n        search_results = wikipedia.search(topic)\n        if not search_results:\n            speak(f\"I couldn't find any information about {topic} on Wikipedia.\")\n            return None\n        # Get the page for the first result\n        try:",
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "get_news_headlines",
        "kind": 2,
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "peekOfCode": "def get_news_headlines(country='us', category='general', count=5):\n    \"\"\"Get top news headlines from NewsAPI.\"\"\"\n    try:\n        # Replace with your actual API key\n        api_key = \"YOUR_NEWSAPI_KEY\"\n        url = f\"https://newsapi.org/v2/top-headlines?country={country}&category={category}&apiKey={api_key}\"\n        response = requests.get(url)\n        news_data = response.json()\n        if news_data['status'] != 'ok' or news_data['totalResults'] == 0:\n            speak(\"Sorry, I couldn't fetch any news headlines right now.\")",
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "get_word_definition",
        "kind": 2,
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "peekOfCode": "def get_word_definition(word):\n    \"\"\"Look up the definition of a word using the Free Dictionary API.\"\"\"\n    try:\n        url = f\"https://api.dictionaryapi.dev/api/v2/entries/en/{word}\"\n        response = requests.get(url)\n        if response.status_code == 404:\n            speak(f\"Sorry, I couldn't find a definition for '{word}'.\")\n            return\n        data = response.json()\n        if not data or not isinstance(data, list):",
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "translate_text",
        "kind": 2,
        "importPath": "grokvis.knowledge",
        "description": "grokvis.knowledge",
        "peekOfCode": "def translate_text(text, target_language):\n    \"\"\"Translate text using the LibreTranslate API.\"\"\"\n    try:\n        # Map common language names to language codes\n        language_map = {\n            'spanish': 'es',\n            'french': 'fr',\n            'german': 'de',\n            'italian': 'it',\n            'portuguese': 'pt',",
        "detail": "grokvis.knowledge",
        "documentation": {}
    },
    {
        "label": "store_memory",
        "kind": 2,
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "peekOfCode": "def store_memory(command, response):\n    \"\"\"Store a command and response in the memory database.\"\"\"\n    try:\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n        embedding = memory_model.encode(command + \" \" + response).tobytes()\n        conn.execute(\"INSERT INTO memory (timestamp, command, response, embedding) VALUES (?, ?, ?, ?)\",\n                     (timestamp, command, response, embedding))\n        conn.commit()\n    except Exception as e:\n        logging.error(f\"Memory Storage Error: {e}\")",
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "recall_memory",
        "kind": 2,
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "peekOfCode": "def recall_memory(query, top_k=1):\n    \"\"\"Recall the most similar past command and response.\"\"\"\n    try:\n        query_emb = memory_model.encode(query)\n        cursor = conn.execute(\"SELECT command, response, embedding FROM memory\")\n        results = []\n        for cmd, resp, emb_blob in cursor:\n            emb = np.frombuffer(emb_blob, dtype=np.float32)\n            similarity = cosine_similarity([query_emb], [emb])[0][0]\n            results.append((similarity, cmd, resp))",
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "handle_memory",
        "kind": 2,
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "peekOfCode": "def handle_memory(command):\n    \"\"\"Handle memory-related commands.\"\"\"\n    if \"remember\" in command:\n        parts = command.split(\"remember\")[-1].strip()\n        store_memory(parts, \"Noted.\")\n        speak(f\"Got it, I'll remember: {parts}.\")\n    elif \"what did i\" in command or \"recall\" in command:\n        query = command.split(\"about\")[-1].strip() if \"about\" in command else command\n        recalled = recall_memory(query)\n        if recalled:",
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "initialize_memory_db",
        "kind": 2,
        "importPath": "grokvis.memory",
        "description": "grokvis.memory",
        "peekOfCode": "def initialize_memory_db():\n    \"\"\"Initialize the memory database if it doesn't exist.\"\"\"\n    try:\n        conn.execute('''\n        CREATE TABLE IF NOT EXISTS memory (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            timestamp TEXT,\n            command TEXT,\n            response TEXT,\n            embedding BLOB",
        "detail": "grokvis.memory",
        "documentation": {}
    },
    {
        "label": "start_timer",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def start_timer(duration_str):\n    \"\"\"Start a countdown timer.\"\"\"\n    try:\n        # Parse the duration string (e.g., \"5 minutes\", \"1 hour 30 minutes\")\n        duration_seconds = 0\n        if \"hour\" in duration_str:\n            hours = int(duration_str.split(\"hour\")[0].strip().split()[-1])\n            duration_seconds += hours * 3600\n        if \"minute\" in duration_str:\n            if \"hour\" in duration_str:",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "timer_complete",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def timer_complete(timer_id):\n    \"\"\"Called when a timer completes.\"\"\"\n    try:\n        if timer_id in timers:\n            speak(\"Timer complete!\")\n            del timers[timer_id]\n    except Exception as e:\n        logging.error(f\"Timer Complete Error: {e}\")\ndef start_stopwatch():\n    \"\"\"Start a stopwatch.\"\"\"",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "start_stopwatch",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def start_stopwatch():\n    \"\"\"Start a stopwatch.\"\"\"\n    try:\n        # Create a unique ID for this stopwatch\n        stopwatch_id = f\"stopwatch_{int(time.time())}\"\n        # Store the stopwatch\n        stopwatches[stopwatch_id] = {\n            \"start_time\": datetime.now(),\n            \"running\": True\n        }",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "stop_stopwatch",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def stop_stopwatch(stopwatch_id=None):\n    \"\"\"Stop a running stopwatch and report the elapsed time.\"\"\"\n    try:\n        # If no ID provided, stop the most recent stopwatch\n        if stopwatch_id is None and stopwatches:\n            stopwatch_id = list(stopwatches.keys())[-1]\n        if stopwatch_id in stopwatches:\n            stopwatch = stopwatches[stopwatch_id]\n            if stopwatch[\"running\"]:\n                elapsed = datetime.now() - stopwatch[\"start_time\"]",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "add_to_shopping_list",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def add_to_shopping_list(item, list_name=\"default\"):\n    \"\"\"Add an item to a shopping list.\"\"\"\n    try:\n        # Initialize the list if it doesn't exist\n        if list_name not in shopping_lists:\n            shopping_lists[list_name] = []\n        # Add the item to the list\n        shopping_lists[list_name].append({\n            \"item\": item,\n            \"added\": datetime.now().isoformat(),",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "show_shopping_list",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def show_shopping_list(list_name=\"default\"):\n    \"\"\"Show the contents of a shopping list.\"\"\"\n    try:\n        if list_name not in shopping_lists or not shopping_lists[list_name]:\n            speak(f\"Your {list_name} shopping list is empty.\")\n            return\n        items = [item[\"item\"] for item in shopping_lists[list_name] if not item[\"completed\"]]\n        if not items:\n            speak(f\"All items in your {list_name} shopping list are marked as completed.\")\n            return",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "save_shopping_lists",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def save_shopping_lists():\n    \"\"\"Save shopping lists to a file.\"\"\"\n    try:\n        with open(\"shopping_lists.json\", \"w\") as f:\n            json.dump(shopping_lists, f)\n    except Exception as e:\n        logging.error(f\"Save Shopping Lists Error: {e}\")\ndef load_shopping_lists():\n    \"\"\"Load shopping lists from a file.\"\"\"\n    global shopping_lists",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "load_shopping_lists",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def load_shopping_lists():\n    \"\"\"Load shopping lists from a file.\"\"\"\n    global shopping_lists\n    try:\n        if os.path.exists(\"shopping_lists.json\"):\n            with open(\"shopping_lists.json\", \"r\") as f:\n                shopping_lists = json.load(f)\n    except Exception as e:\n        logging.error(f\"Load Shopping Lists Error: {e}\")\n        shopping_lists = {}",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "take_note",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def take_note(content):\n    \"\"\"Save a note.\"\"\"\n    try:\n        # Create a new note\n        note = {\n            \"content\": content,\n            \"timestamp\": datetime.now().isoformat(),\n            \"id\": len(notes) + 1\n        }\n        # Add it to the notes list",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "show_notes",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def show_notes(count=5):\n    \"\"\"Show recent notes.\"\"\"\n    try:\n        if not notes:\n            speak(\"You don't have any notes yet.\")\n            return\n        recent_notes = sorted(notes, key=lambda x: x[\"timestamp\"], reverse=True)[:count]\n        speak(f\"Here are your {len(recent_notes)} most recent notes:\")\n        for i, note in enumerate(recent_notes):\n            timestamp = datetime.fromisoformat(note[\"timestamp\"]).strftime(\"%B %d, %Y at %I:%M %p\")",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "save_notes",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def save_notes():\n    \"\"\"Save notes to a file.\"\"\"\n    try:\n        with open(\"notes.json\", \"w\") as f:\n            json.dump(notes, f)\n    except Exception as e:\n        logging.error(f\"Save Notes Error: {e}\")\ndef load_notes():\n    \"\"\"Load notes from a file.\"\"\"\n    global notes",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "load_notes",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def load_notes():\n    \"\"\"Load notes from a file.\"\"\"\n    global notes\n    try:\n        if os.path.exists(\"notes.json\"):\n            with open(\"notes.json\", \"r\") as f:\n                notes = json.load(f)\n    except Exception as e:\n        logging.error(f\"Load Notes Error: {e}\")\n        notes = []",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "location_reminder",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def location_reminder(task, location):\n    \"\"\"Set a reminder for when you reach a specific location.\"\"\"\n    try:\n        # In a real implementation, this would use geofencing or location services\n        # For demonstration, we'll just save it to a database\n        conn = sqlite3.connect(\"location_reminders.db\")\n        cursor = conn.cursor()\n        # Create table if it doesn't exist\n        cursor.execute('''\n        CREATE TABLE IF NOT EXISTS location_reminders (",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "def initialize():\n    \"\"\"Initialize the productivity module.\"\"\"\n    load_shopping_lists()\n    load_notes()",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "timers",
        "kind": 5,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "timers = {}\nstopwatches = {}\nshopping_lists = {}\nnotes = []\ndef start_timer(duration_str):\n    \"\"\"Start a countdown timer.\"\"\"\n    try:\n        # Parse the duration string (e.g., \"5 minutes\", \"1 hour 30 minutes\")\n        duration_seconds = 0\n        if \"hour\" in duration_str:",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "stopwatches",
        "kind": 5,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "stopwatches = {}\nshopping_lists = {}\nnotes = []\ndef start_timer(duration_str):\n    \"\"\"Start a countdown timer.\"\"\"\n    try:\n        # Parse the duration string (e.g., \"5 minutes\", \"1 hour 30 minutes\")\n        duration_seconds = 0\n        if \"hour\" in duration_str:\n            hours = int(duration_str.split(\"hour\")[0].strip().split()[-1])",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "shopping_lists",
        "kind": 5,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "shopping_lists = {}\nnotes = []\ndef start_timer(duration_str):\n    \"\"\"Start a countdown timer.\"\"\"\n    try:\n        # Parse the duration string (e.g., \"5 minutes\", \"1 hour 30 minutes\")\n        duration_seconds = 0\n        if \"hour\" in duration_str:\n            hours = int(duration_str.split(\"hour\")[0].strip().split()[-1])\n            duration_seconds += hours * 3600",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "notes",
        "kind": 5,
        "importPath": "grokvis.productivity",
        "description": "grokvis.productivity",
        "peekOfCode": "notes = []\ndef start_timer(duration_str):\n    \"\"\"Start a countdown timer.\"\"\"\n    try:\n        # Parse the duration string (e.g., \"5 minutes\", \"1 hour 30 minutes\")\n        duration_seconds = 0\n        if \"hour\" in duration_str:\n            hours = int(duration_str.split(\"hour\")[0].strip().split()[-1])\n            duration_seconds += hours * 3600\n        if \"minute\" in duration_str:",
        "detail": "grokvis.productivity",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "grokvis.scheduler",
        "description": "grokvis.scheduler",
        "peekOfCode": "def add_event(time_str, task):\n    \"\"\"Schedule an event using APScheduler.\"\"\"\n    try:\n        event_time = datetime.datetime.strptime(time_str, \"%H:%M\")\n        event_time = event_time.replace(year=datetime.datetime.now().year,\n                                        month=datetime.datetime.now().month,\n                                        day=datetime.datetime.now().day)\n        if event_time < datetime.datetime.now():\n            event_time += datetime.timedelta(days=1)\n        scheduler.add_job(speak, 'date', run_date=event_time, args=[f\"Reminder: {task} now.\"])",
        "detail": "grokvis.scheduler",
        "documentation": {}
    },
    {
        "label": "list_events",
        "kind": 2,
        "importPath": "grokvis.scheduler",
        "description": "grokvis.scheduler",
        "peekOfCode": "def list_events():\n    \"\"\"List all scheduled events.\"\"\"\n    try:\n        jobs = scheduler.get_jobs()\n        if not jobs:\n            speak(\"You have no scheduled events.\")\n            return\n        speak(\"Here are your scheduled events:\")\n        for job in jobs:\n            run_time = job.next_run_time.strftime(\"%Y-%m-%d %H:%M\")",
        "detail": "grokvis.scheduler",
        "documentation": {}
    },
    {
        "label": "remove_event",
        "kind": 2,
        "importPath": "grokvis.scheduler",
        "description": "grokvis.scheduler",
        "peekOfCode": "def remove_event(task_keyword):\n    \"\"\"Remove an event containing the given keyword.\"\"\"\n    try:\n        jobs = scheduler.get_jobs()\n        removed = False\n        for job in jobs:\n            if job.args and task_keyword.lower() in job.args[0].lower():\n                job_id = job.id\n                scheduler.remove_job(job_id)\n                speak(f\"Removed event: {job.args[0]}\")",
        "detail": "grokvis.scheduler",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def speak(text):\n    \"\"\"Speak the given text aloud using Coqui TTS.\"\"\"\n    try:\n        print(text)\n        tts.tts_to_file(text=text, file_path=\"output.wav\")\n        audio_data, samplerate = sd.read(\"output.wav\")\n        sd.play(audio_data, samplerate=samplerate)\n        sd.wait()\n    except Exception as e:\n        logging.error(f\"TTS Error: {e}\")",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "record_clip",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def record_clip(filename):\n    \"\"\"Record a short audio clip and save it to a file.\"\"\"\n    try:\n        recognizer = sr.Recognizer()\n        with sr.Microphone() as source:\n            print(\"Say something...\")\n            audio = recognizer.listen(source)\n            with open(filename, \"wb\") as f:\n                f.write(audio.get_wav_data())\n    except Exception as e:",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "extract_mfcc",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def extract_mfcc(file_path):\n    \"\"\"Extract MFCC features from an audio file.\"\"\"\n    try:\n        audio, sample_rate = librosa.load(file_path, sr=16000)\n        mfcc = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=13)\n        return np.mean(mfcc.T, axis=0)\n    except Exception as e:\n        logging.error(f\"MFCC Extraction Error: {e}\")\n        return None\ndef train_one_class_model(directory):",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "train_one_class_model",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def train_one_class_model(directory):\n    \"\"\"Train a One-Class SVM model on voice samples.\"\"\"\n    try:\n        files = glob.glob(f\"{directory}/*.wav\")\n        X = [extract_mfcc(f) for f in files if extract_mfcc(f) is not None]\n        model = OneClassSVM(kernel='rbf', gamma='auto')\n        model.fit(X)\n        joblib.dump(model, 'voice_model.pkl')\n        return model\n    except Exception as e:",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "listen",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def listen():\n    \"\"\"Listen for a command and verify the speaker's voice.\"\"\"\n    try:\n        recognizer = sr.Recognizer()\n        with sr.Microphone() as source:\n            print(\"Listening...\")\n            audio = recognizer.listen(source)\n            with open(\"temp.wav\", \"wb\") as f:\n                f.write(audio.get_wav_data())\n            mfcc = extract_mfcc(\"temp.wav\")",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "wake_word_listener",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def wake_word_listener():\n    \"\"\"Listen for the wake word 'Hey GrokVis' using Porcupine.\"\"\"\n    global wake_word_handle\n    try:\n        # Better to use environment variable or config file\n        access_key = os.environ.get(\n            \"PICOVOICE_ACCESS_KEY\",\n            \"YpmwAcCDdDu82WlIAbZWMn840MiaGELoTIt+Ssh3LivetKM1k+Nw3w==\",\n        )\n        keywords = [\"Hey Grok\"]",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "setup_personality",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def setup_personality():\n    \"\"\"First-time setup to choose between Alfred (male) or Beatrice (female) persona.\"\"\"\n    global tts\n    try:\n        # Check if persona is already set\n        if os.path.exists('persona_config.txt'):\n            with open('persona_config.txt', 'r') as f:\n                persona = f.read().strip()\n            if persona == \"Alfred\":\n                tts = TTS(model_name=\"tts_models/en/ljspeech/tacotron2-DDC\")  # Male-like voice",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "train_voice_model",
        "kind": 2,
        "importPath": "grokvis.speech",
        "description": "grokvis.speech",
        "peekOfCode": "def train_voice_model():\n    \"\"\"Load or train the voice model.\"\"\"\n    global model\n    try:\n        model = joblib.load('voice_model.pkl')\n        speak(\"Voice model loaded successfully.\")\n    except FileNotFoundError:\n        speak(\"I need to learn your voice. Please say 10 phrases after each prompt.\")\n        if not os.path.exists('voice_samples/my_voice'):\n            os.makedirs('voice_samples/my_voice')",
        "detail": "grokvis.speech",
        "documentation": {}
    },
    {
        "label": "switch_persona",
        "kind": 2,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "def switch_persona(new_persona):\n    \"\"\"Switch to a different assistant persona.\"\"\"\n    try:\n        # Check if the persona exists\n        if new_persona.lower() not in [\"alfred\", \"beatrice\"]:\n            speak(f\"Sorry, I don't have a persona named {new_persona}.\")\n            return False\n        # Save the new persona choice\n        with open('persona_config.txt', 'w') as f:\n            f.write(new_persona.capitalize())",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "adjust_volume",
        "kind": 2,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "def adjust_volume(direction):\n    \"\"\"Adjust the system volume up or down.\"\"\"\n    global volume_level\n    try:\n        # Determine the direction\n        if direction.lower() in [\"up\", \"increase\", \"higher\", \"louder\"]:\n            # Increase volume by 10%\n            volume_level = min(100, volume_level + 10)\n            direction_text = \"up\"\n        elif direction.lower() in [\"down\", \"decrease\", \"lower\", \"quieter\"]:",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "sleep_mode",
        "kind": 2,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "def sleep_mode(duration_str):\n    \"\"\"Temporarily disable wake word detection for a specified time period.\"\"\"\n    global sleep_until\n    try:\n        # Parse the duration string (e.g., \"5 minutes\", \"1 hour\")\n        duration_seconds = 0\n        if \"hour\" in duration_str:\n            hours = int(duration_str.split(\"hour\")[0].strip().split()[-1])\n            duration_seconds += hours * 3600\n        if \"minute\" in duration_str:",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "wake_up_after_sleep",
        "kind": 2,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "def wake_up_after_sleep(duration_seconds):\n    \"\"\"Wake up after the specified sleep duration.\"\"\"\n    try:\n        time.sleep(duration_seconds)\n        global sleep_until\n        sleep_until = None\n        speak(\"I'm awake and listening again.\")\n    except Exception as e:\n        logging.error(f\"Wake Up Error: {e}\")\n        # Reset sleep_until in case of error",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "is_sleeping",
        "kind": 2,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "def is_sleeping():\n    \"\"\"Check if the system is currently in sleep mode.\"\"\"\n    if sleep_until is None:\n        return False\n    return datetime.now() < sleep_until\ndef check_for_updates():\n    \"\"\"Check for and install updates to GrokVIS.\"\"\"\n    try:\n        # In a real implementation, this would check a GitHub repository or other source\n        # For demonstration, we'll simulate an update check",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "kind": 2,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "def check_for_updates():\n    \"\"\"Check for and install updates to GrokVIS.\"\"\"\n    try:\n        # In a real implementation, this would check a GitHub repository or other source\n        # For demonstration, we'll simulate an update check\n        speak(\"Checking for updates...\")\n        # Simulate a network request\n        time.sleep(2)\n        # Randomly determine if an update is available (for demonstration)\n        import random",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "sleep_until",
        "kind": 5,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "sleep_until = None\nvolume_level = 50  # Default volume level (0-100)\ndef switch_persona(new_persona):\n    \"\"\"Switch to a different assistant persona.\"\"\"\n    try:\n        # Check if the persona exists\n        if new_persona.lower() not in [\"alfred\", \"beatrice\"]:\n            speak(f\"Sorry, I don't have a persona named {new_persona}.\")\n            return False\n        # Save the new persona choice",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "volume_level",
        "kind": 5,
        "importPath": "grokvis.system",
        "description": "grokvis.system",
        "peekOfCode": "volume_level = 50  # Default volume level (0-100)\ndef switch_persona(new_persona):\n    \"\"\"Switch to a different assistant persona.\"\"\"\n    try:\n        # Check if the persona exists\n        if new_persona.lower() not in [\"alfred\", \"beatrice\"]:\n            speak(f\"Sorry, I don't have a persona named {new_persona}.\")\n            return False\n        # Save the new persona choice\n        with open('persona_config.txt', 'w') as f:",
        "detail": "grokvis.system",
        "documentation": {}
    },
    {
        "label": "load_user_apps",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def load_user_apps():\n    \"\"\"Load user-defined application shortcuts from file.\"\"\"\n    global user_apps\n    try:\n        if os.path.exists(USER_APPS_FILE):\n            with open(USER_APPS_FILE, 'r') as f:\n                user_apps = json.load(f)\n    except Exception as e:\n        logging.error(f\"Error loading user apps: {e}\")\n        user_apps = {}",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "save_user_apps",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def save_user_apps():\n    \"\"\"Save user-defined application shortcuts to file.\"\"\"\n    try:\n        with open(USER_APPS_FILE, 'w') as f:\n            json.dump(user_apps, f, indent=2)\n    except Exception as e:\n        logging.error(f\"Error saving user apps: {e}\")\ndef get_platform():\n    \"\"\"Get the current operating system platform.\"\"\"\n    system = platform.system().lower()",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "get_platform",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def get_platform():\n    \"\"\"Get the current operating system platform.\"\"\"\n    system = platform.system().lower()\n    if system == \"darwin\":\n        return \"macos\"\n    elif system == \"windows\":\n        return \"windows\"\n    else:\n        return \"linux\"\ndef launch_application(app_name):",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "launch_application",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def launch_application(app_name):\n    \"\"\"Launch an application by name.\"\"\"\n    try:\n        # Normalize app name\n        app_name = app_name.lower().strip()\n        # Get current platform\n        current_platform = get_platform()\n        # Check if it's a user-defined app\n        if app_name in user_apps:\n            app_path = user_apps[app_name]",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "close_application",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def close_application(app_name):\n    \"\"\"Close an application by name.\"\"\"\n    try:\n        # Normalize app name\n        app_name = app_name.lower().strip()\n        # Map of common app names to process names\n        process_map = {\n            \"chrome\": [\"chrome\", \"googlechrome\"],\n            \"firefox\": [\"firefox\", \"mozilla firefox\"],\n            \"edge\": [\"msedge\", \"microsoft edge\"],",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def take_screenshot():\n    \"\"\"Take a screenshot and save it to the desktop.\"\"\"\n    try:\n        from PIL import ImageGrab\n        import datetime\n        # Create filename with timestamp\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        desktop = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\n        filename = os.path.join(desktop, f\"screenshot_{timestamp}.png\")\n        # Take screenshot",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "lock_computer",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def lock_computer():\n    \"\"\"Lock the computer.\"\"\"\n    try:\n        current_platform = get_platform()\n        if current_platform == \"windows\":\n            subprocess.call('rundll32.exe user32.dll,LockWorkStation')\n        elif current_platform == \"macos\":\n            subprocess.call('pmset displaysleepnow', shell=True)\n        else:  # Linux\n            subprocess.call('gnome-screensaver-command --lock', shell=True)",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "shutdown_computer",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def shutdown_computer(delay=0):\n    \"\"\"Shutdown the computer with optional delay in minutes.\"\"\"\n    try:\n        current_platform = get_platform()\n        if delay > 0:\n            speak(f\"Scheduling shutdown in {delay} minutes\")\n        else:\n            speak(\"Shutting down your computer\")\n        if current_platform == \"windows\":\n            if delay > 0:",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "restart_computer",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def restart_computer():\n    \"\"\"Restart the computer.\"\"\"\n    try:\n        current_platform = get_platform()\n        speak(\"Restarting your computer\")\n        if current_platform == \"windows\":\n            subprocess.call('shutdown /r /t 0', shell=True)\n        elif current_platform == \"macos\":\n            subprocess.call('sudo shutdown -r now', shell=True)\n        else:  # Linux",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "get_system_status",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def get_system_status():\n    \"\"\"Get system status information.\"\"\"\n    try:\n        # Get CPU usage\n        cpu_percent = psutil.cpu_percent(interval=1)\n        # Get memory usage\n        memory = psutil.virtual_memory()\n        memory_percent = memory.percent\n        memory_used = memory.used / (1024 * 1024 * 1024)  # Convert to GB\n        memory_total = memory.total / (1024 * 1024 * 1024)  # Convert to GB",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "find_files",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def find_files(query, location=None):\n    \"\"\"Find files matching a query.\"\"\"\n    try:\n        if location is None:\n            # Default to user's home directory\n            location = os.path.expanduser(\"~\")\n        speak(f\"Searching for {query} in {location}\")\n        # Get list of files matching query\n        results = []\n        for root, dirs, files in os.walk(location):",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "open_file",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def open_file(filepath):\n    \"\"\"Open a file with the default application.\"\"\"\n    try:\n        current_platform = get_platform()\n        if current_platform == \"windows\":\n            os.startfile(filepath)\n        elif current_platform == \"macos\":\n            subprocess.call(['open', filepath])\n        else:  # Linux\n            subprocess.call(['xdg-open', filepath])",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def create_folder(folder_name, location=None):\n    \"\"\"Create a new folder.\"\"\"\n    try:\n        if location is None:\n            # Default to user's home directory\n            location = os.path.expanduser(\"~\")\n        # Create full path\n        folder_path = os.path.join(location, folder_name)\n        # Create folder if it doesn't exist\n        if not os.path.exists(folder_path):",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "add_app_shortcut",
        "kind": 2,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "def add_app_shortcut(app_name, app_path):\n    \"\"\"Add a user-defined application shortcut.\"\"\"\n    try:\n        # Normalize app name\n        app_name = app_name.lower().strip()\n        # Check if path exists\n        if not os.path.exists(app_path):\n            speak(f\"I couldn't find an application at {app_path}.\")\n            return False\n        # Add to user apps",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "APP_PATHS",
        "kind": 5,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "APP_PATHS = {\n    \"windows\": {\n        \"chrome\": r\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\",\n        \"firefox\": r\"C:\\Program Files\\Mozilla Firefox\\firefox.exe\",\n        \"edge\": r\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\",\n        \"word\": r\"C:\\Program Files\\Microsoft Office\\root\\Office16\\WINWORD.EXE\",\n        \"excel\": r\"C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE\",\n        \"powerpoint\": r\"C:\\Program Files\\Microsoft Office\\root\\Office16\\POWERPNT.EXE\",\n        \"notepad\": r\"C:\\Windows\\System32\\notepad.exe\",\n        \"calculator\": r\"C:\\Windows\\System32\\calc.exe\",",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "USER_APPS_FILE",
        "kind": 5,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "USER_APPS_FILE = \"user_apps.json\"\nuser_apps = {}\ndef load_user_apps():\n    \"\"\"Load user-defined application shortcuts from file.\"\"\"\n    global user_apps\n    try:\n        if os.path.exists(USER_APPS_FILE):\n            with open(USER_APPS_FILE, 'r') as f:\n                user_apps = json.load(f)\n    except Exception as e:",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "user_apps",
        "kind": 5,
        "importPath": "grokvis.system_control",
        "description": "grokvis.system_control",
        "peekOfCode": "user_apps = {}\ndef load_user_apps():\n    \"\"\"Load user-defined application shortcuts from file.\"\"\"\n    global user_apps\n    try:\n        if os.path.exists(USER_APPS_FILE):\n            with open(USER_APPS_FILE, 'r') as f:\n                user_apps = json.load(f)\n    except Exception as e:\n        logging.error(f\"Error loading user apps: {e}\")",
        "detail": "grokvis.system_control",
        "documentation": {}
    },
    {
        "label": "fetch_weather",
        "kind": 2,
        "importPath": "grokvis.weather",
        "description": "grokvis.weather",
        "peekOfCode": "def fetch_weather(city):\n    \"\"\"Fetch weather data synchronously for threading.\"\"\"\n    api_key = \"YOUR_API_KEY\"  # Replace with your OpenWeatherMap API key\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric\"\n    response = requests.get(url).json()\n    return response['main']['temp'], response['weather'][0]['description']\ndef get_weather(city):\n    \"\"\"Fetch and announce weather asynchronously.\"\"\"\n    try:\n        future = executor.submit(fetch_weather, city)",
        "detail": "grokvis.weather",
        "documentation": {}
    },
    {
        "label": "get_weather",
        "kind": 2,
        "importPath": "grokvis.weather",
        "description": "grokvis.weather",
        "peekOfCode": "def get_weather(city):\n    \"\"\"Fetch and announce weather asynchronously.\"\"\"\n    try:\n        future = executor.submit(fetch_weather, city)\n        temp, desc = future.result()\n        speak(f\"{city}: {temp}°C, {desc}.\")\n        return {\"temp\": temp, \"desc\": desc}\n    except Exception as e:\n        logging.error(f\"Weather API Error: {e}\")\n        speak(\"Sorry, I couldn't fetch the weather.\")",
        "detail": "grokvis.weather",
        "documentation": {}
    },
    {
        "label": "get_forecast",
        "kind": 2,
        "importPath": "grokvis.weather",
        "description": "grokvis.weather",
        "peekOfCode": "def get_forecast(city, days=5):\n    \"\"\"Get a multi-day weather forecast.\"\"\"\n    try:\n        api_key = \"YOUR_API_KEY\"  # Replace with your OpenWeatherMap API key\n        url = f\"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&cnt={days*8}\"\n        response = requests.get(url).json()\n        # Process the forecast data (every 3 hours for 5 days)\n        daily_forecasts = {}\n        for item in response['list']:\n            date = item['dt_txt'].split(' ')[0]",
        "detail": "grokvis.weather",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "grokvis.web",
        "description": "grokvis.web",
        "peekOfCode": "def dashboard():\n    \"\"\"Render the GROK-VIS dashboard.\"\"\"\n    try:\n        # Fetch scheduled jobs\n        jobs = scheduler.get_jobs()\n        scheduled_tasks = [(job.next_run_time.strftime('%Y-%m-%d %H:%M'), job.args[0]) for job in jobs]\n        # Fetch recent commands\n        try:\n            with open(\"command_log.txt\", \"r\") as f:\n                commands = f.readlines()[-10:]  # Last 10 commands",
        "detail": "grokvis.web",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "grokvis.web",
        "description": "grokvis.web",
        "peekOfCode": "def health_check():\n    \"\"\"Simple health check endpoint.\"\"\"\n    return {\"status\": \"ok\", \"version\": \"1.0.0\"}\n@app.route('/stats')\ndef system_stats():\n    \"\"\"Display system statistics.\"\"\"\n    try:\n        import psutil\n        import pynvml\n        # CPU stats",
        "detail": "grokvis.web",
        "documentation": {}
    },
    {
        "label": "system_stats",
        "kind": 2,
        "importPath": "grokvis.web",
        "description": "grokvis.web",
        "peekOfCode": "def system_stats():\n    \"\"\"Display system statistics.\"\"\"\n    try:\n        import psutil\n        import pynvml\n        # CPU stats\n        cpu_percent = psutil.cpu_percent(interval=1)\n        memory = psutil.virtual_memory()\n        memory_percent = memory.percent\n        # GPU stats",
        "detail": "grokvis.web",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "grokvis.web",
        "description": "grokvis.web",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef dashboard():\n    \"\"\"Render the GROK-VIS dashboard.\"\"\"\n    try:\n        # Fetch scheduled jobs\n        jobs = scheduler.get_jobs()\n        scheduled_tasks = [(job.next_run_time.strftime('%Y-%m-%d %H:%M'), job.args[0]) for job in jobs]\n        # Fetch recent commands\n        try:",
        "detail": "grokvis.web",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def speak(text):\n    \"\"\"Speak the given text aloud using Coqui TTS.\"\"\"\n    try:\n        print(text)\n        tts.tts_to_file(text=text, file_path=\"output.wav\")\n        audio_data, samplerate = sd.read(\"output.wav\")\n        sd.play(audio_data, samplerate=samplerate)\n        sd.wait()\n    except Exception as e:\n        logging.error(f\"TTS Error: {e}\")",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "record_clip",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def record_clip(filename):\n    \"\"\"Record a short audio clip and save it to a file.\"\"\"\n    try:\n        recognizer = sr.Recognizer()\n        with sr.Microphone() as source:\n            print(\"Say something...\")\n            audio = recognizer.listen(source)\n            with open(filename, \"wb\") as f:\n                f.write(audio.get_wav_data())\n    except Exception as e:",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "extract_mfcc",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def extract_mfcc(file_path):\n    \"\"\"Extract MFCC features from an audio file.\"\"\"\n    try:\n        audio, sample_rate = librosa.load(file_path, sr=16000)\n        mfcc = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=13)\n        return np.mean(mfcc.T, axis=0)\n    except Exception as e:\n        logging.error(f\"MFCC Extraction Error: {e}\")\n        return None\ndef train_one_class_model(directory):",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "train_one_class_model",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def train_one_class_model(directory):\n    \"\"\"Train a One-Class SVM model on voice samples.\"\"\"\n    try:\n        files = glob.glob(f\"{directory}/*.wav\")\n        X = [extract_mfcc(f) for f in files if extract_mfcc(f) is not None]\n        model = OneClassSVM(kernel='rbf', gamma='auto')\n        model.fit(X)\n        joblib.dump(model, 'voice_model.pkl')\n        return model\n    except Exception as e:",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "listen",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def listen():\n    \"\"\"Listen for a command and verify the speaker's voice.\"\"\"\n    global model\n    try:\n        recognizer = sr.Recognizer()\n        with sr.Microphone() as source:\n            print(\"Listening...\")\n            audio = recognizer.listen(source)\n            with open(\"temp.wav\", \"wb\") as f:\n                f.write(audio.get_wav_data())",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "wake_word_listener",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def wake_word_listener():\n    \"\"\"Listen for the wake word 'Hey GrokVis' using Porcupine.\"\"\"\n    global wake_word_handle\n    try:\n        access_key = \"YOUR_PICOVOICE_ACCESS_KEY\"  # Replace with your Picovoice key\n        keywords = [\"Hey GrokVis\"]\n        wake_word_handle = pvporcupine.create(access_key=access_key, keywords=keywords, sensitivities=[0.5])\n        def audio_callback(indata, frames, time, status):\n            pcm = struct.pack('<' + ('h' * len(indata)), *indata)\n            if wake_word_handle.process(pcm) >= 0:",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "store_memory",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def store_memory(command, response):\n    \"\"\"Store a command and response in the memory database.\"\"\"\n    try:\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n        embedding = memory_model.encode(command + \" \" + response).tobytes()\n        conn.execute(\"INSERT INTO memory (timestamp, command, response, embedding) VALUES (?, ?, ?, ?)\",\n                     (timestamp, command, response, embedding))\n        conn.commit()\n    except Exception as e:\n        logging.error(f\"Memory Storage Error: {e}\")",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "recall_memory",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def recall_memory(query, top_k=1):\n    \"\"\"Recall the most similar past command and response.\"\"\"\n    try:\n        query_emb = memory_model.encode(query)\n        cursor = conn.execute(\"SELECT command, response, embedding FROM memory\")\n        results = []\n        for cmd, resp, emb_blob in cursor:\n            emb = np.frombuffer(emb_blob, dtype=np.float32)\n            similarity = cosine_similarity([query_emb], [emb])[0][0]\n            results.append((similarity, cmd, resp))",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "handle_memory",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def handle_memory(command):\n    \"\"\"Handle memory-related commands.\"\"\"\n    if \"remember\" in command:\n        parts = command.split(\"remember\")[-1].strip()\n        store_memory(parts, \"Noted.\")\n        speak(f\"Got it, I’ll remember: {parts}.\")\n    elif \"what did i\" in command or \"recall\" in command:\n        query = command.split(\"about\")[-1].strip() if \"about\" in command else command\n        recalled = recall_memory(query)\n        if recalled:",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def add_event(time_str, task):\n    \"\"\"Schedule an event using APScheduler.\"\"\"\n    try:\n        event_time = datetime.datetime.strptime(time_str, \"%H:%M\")\n        event_time = event_time.replace(year=datetime.datetime.now().year,\n                                        month=datetime.datetime.now().month,\n                                        day=datetime.datetime.now().day)\n        if event_time < datetime.datetime.now():\n            event_time += datetime.timedelta(days=1)\n        scheduler.add_job(speak, 'date', run_date=event_time, args=[f\"Reminder: {task} now.\"])",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "wake_pc",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def wake_pc(mac_address=\"YOUR_PC_MAC\"):\n    \"\"\"Wake a PC using Wake-on-LAN.\"\"\"\n    try:\n        wakeonlan.send_magic_packet(mac_address)\n        speak(\"PC waking up. Don’t fry it.\")\n    except Exception as e:\n        logging.error(f\"Wake-on-LAN Error: {e}\")\n        speak(\"Sorry, I couldn’t wake the PC.\")\ndef control_device(device, action):\n    \"\"\"Simulate controlling a smart device.\"\"\"",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "control_device",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def control_device(device, action):\n    \"\"\"Simulate controlling a smart device.\"\"\"\n    try:\n        speak(f\"{action}ing the {device}. Need more?\")\n    except Exception as e:\n        logging.error(f\"Device Control Error: {e}\")\n        speak(\"Sorry, I couldn’t control the device.\")\n# Async Weather Fetching\ndef fetch_weather(city):\n    \"\"\"Fetch weather data synchronously for threading.\"\"\"",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "fetch_weather",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def fetch_weather(city):\n    \"\"\"Fetch weather data synchronously for threading.\"\"\"\n    api_key = \"YOUR_API_KEY\"  # Replace with your OpenWeatherMap API key\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric\"\n    response = requests.get(url).json()\n    return response['main']['temp'], response['weather'][0]['description']\ndef get_weather(city):\n    \"\"\"Fetch and announce weather asynchronously.\"\"\"\n    try:\n        future = executor.submit(fetch_weather, city)",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "get_weather",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def get_weather(city):\n    \"\"\"Fetch and announce weather asynchronously.\"\"\"\n    try:\n        future = executor.submit(fetch_weather, city)\n        temp, desc = future.result()\n        speak(f\"{city}: {temp}°C, {desc}.\")\n        return {\"temp\": temp, \"desc\": desc}\n    except Exception as e:\n        logging.error(f\"Weather API Error: {e}\")\n        speak(\"Sorry, I couldn’t fetch the weather.\")",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def dashboard():\n    \"\"\"Render the GROK-VIS dashboard.\"\"\"\n    try:\n        # Fetch scheduled jobs\n        jobs = scheduler.get_jobs()\n        scheduled_tasks = [(job.next_run_time.strftime('%Y-%m-%d %H:%M'), job.args[0]) for job in jobs]\n        # Fetch recent commands\n        with open(\"command_log.txt\", \"r\") as f:\n            commands = f.readlines()[-10:]  # Last 10 commands\n        html = \"\"\"",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "process_command",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def process_command(command):\n    \"\"\"Process the spoken command.\"\"\"\n    try:\n        if not command:\n            return\n        # Log command for future LLM training\n        with open(\"command_log.txt\", \"a\") as f:\n            f.write(f\"{command}\\n\")\n        if \"turn on my pc\" in command:\n            wake_pc()",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "grokvis_run",
        "kind": 2,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "def grokvis_run():\n    \"\"\"Run the main GROK-VIS loop with wake word detection.\"\"\"\n    global model\n    try:\n        # Load or train the voice model\n        if model is None:\n            try:\n                model = joblib.load('voice_model.pkl')\n                speak(\"Voice model loaded successfully.\")\n            except FileNotFoundError:",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "memory_model",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "memory_model = SentenceTransformer('all-MiniLM-L6-v2')\nnlp = spacy.load(\"en_core_web_sm\")\npynvml.nvmlInit()\nconn = sqlite3.connect(\"grokvis_memory.db\")\ntts = TTS(model_name=\"tts_models/en/ljspeech/tacotron2-DDC\")\nexecutor = ThreadPoolExecutor(max_workers=2)  # Thread pool for async tasks\n# APScheduler setup\njobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.db')}\nscheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "nlp = spacy.load(\"en_core_web_sm\")\npynvml.nvmlInit()\nconn = sqlite3.connect(\"grokvis_memory.db\")\ntts = TTS(model_name=\"tts_models/en/ljspeech/tacotron2-DDC\")\nexecutor = ThreadPoolExecutor(max_workers=2)  # Thread pool for async tasks\n# APScheduler setup\njobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.db')}\nscheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()\n# Flask app setup",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "conn = sqlite3.connect(\"grokvis_memory.db\")\ntts = TTS(model_name=\"tts_models/en/ljspeech/tacotron2-DDC\")\nexecutor = ThreadPoolExecutor(max_workers=2)  # Thread pool for async tasks\n# APScheduler setup\njobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.db')}\nscheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()\n# Flask app setup\napp = Flask(__name__)\n# Personality quips",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "tts",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "tts = TTS(model_name=\"tts_models/en/ljspeech/tacotron2-DDC\")\nexecutor = ThreadPoolExecutor(max_workers=2)  # Thread pool for async tasks\n# APScheduler setup\njobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.db')}\nscheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()\n# Flask app setup\napp = Flask(__name__)\n# Personality quips\njarvis_quips = [",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "executor",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "executor = ThreadPoolExecutor(max_workers=2)  # Thread pool for async tasks\n# APScheduler setup\njobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.db')}\nscheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()\n# Flask app setup\napp = Flask(__name__)\n# Personality quips\njarvis_quips = [\n    \"At your service—Stark would be jealous.\",",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "jobstores",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "jobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.db')}\nscheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()\n# Flask app setup\napp = Flask(__name__)\n# Personality quips\njarvis_quips = [\n    \"At your service—Stark would be jealous.\",\n    \"Task complete. Shall I polish your armor next?\",\n    \"I’m no android, but I’ve got your back.\"",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "scheduler = BackgroundScheduler(jobstores=jobstores)\nscheduler.start()\n# Flask app setup\napp = Flask(__name__)\n# Personality quips\njarvis_quips = [\n    \"At your service—Stark would be jealous.\",\n    \"Task complete. Shall I polish your armor next?\",\n    \"I’m no android, but I’ve got your back.\"\n]",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "app = Flask(__name__)\n# Personality quips\njarvis_quips = [\n    \"At your service—Stark would be jealous.\",\n    \"Task complete. Shall I polish your armor next?\",\n    \"I’m no android, but I’ve got your back.\"\n]\n# Global variables\nmodel = None\nwake_word_handle = None",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "jarvis_quips",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "jarvis_quips = [\n    \"At your service—Stark would be jealous.\",\n    \"Task complete. Shall I polish your armor next?\",\n    \"I’m no android, but I’ve got your back.\"\n]\n# Global variables\nmodel = None\nwake_word_handle = None\n# Core Functions\ndef speak(text):",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "model = None\nwake_word_handle = None\n# Core Functions\ndef speak(text):\n    \"\"\"Speak the given text aloud using Coqui TTS.\"\"\"\n    try:\n        print(text)\n        tts.tts_to_file(text=text, file_path=\"output.wav\")\n        audio_data, samplerate = sd.read(\"output.wav\")\n        sd.play(audio_data, samplerate=samplerate)",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "wake_word_handle",
        "kind": 5,
        "importPath": "sample.grokvis",
        "description": "sample.grokvis",
        "peekOfCode": "wake_word_handle = None\n# Core Functions\ndef speak(text):\n    \"\"\"Speak the given text aloud using Coqui TTS.\"\"\"\n    try:\n        print(text)\n        tts.tts_to_file(text=text, file_path=\"output.wav\")\n        audio_data, samplerate = sd.read(\"output.wav\")\n        sd.play(audio_data, samplerate=samplerate)\n        sd.wait()",
        "detail": "sample.grokvis",
        "documentation": {}
    },
    {
        "label": "check_dependency",
        "kind": 2,
        "importPath": "tests.check_dependency",
        "description": "tests.check_dependency",
        "peekOfCode": "def check_dependency(package_name):\n    \"\"\"\n    Check if a specific package is installed.\n    Args:\n        package_name (str): The name of the package to check.\n    Returns:\n        bool: True if the package is installed, False otherwise.\n    \"\"\"\n    try:\n        # Handle special case for opencv-python",
        "detail": "tests.check_dependency",
        "documentation": {}
    },
    {
        "label": "check_python_version",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_python_version():\n    \"\"\"Check if the Python version is compatible with Grok-VIS.\"\"\"\n    python_version = platform.python_version()\n    logging.info(f\"Python version: {python_version}\")\n    # Check if the Python version is at least 3.8\n    major, minor, _ = map(int, python_version.split('.'))\n    if major < 3 or (major == 3 and minor < 8):\n        logging.error(\"Python version is too old. Grok-VIS requires Python 3.8 or newer.\")\n        return False\n    return True",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "check_system_info",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_system_info():\n    \"\"\"Check system information.\"\"\"\n    logging.info(f\"Operating System: {platform.system()} {platform.release()}\")\n    logging.info(f\"Machine: {platform.machine()}\")\n    logging.info(f\"Processor: {platform.processor()}\")\n    # Check if the system is compatible with Grok-VIS\n    if platform.system() not in ['Windows', 'Linux', 'Darwin']:\n        logging.warning(\"Unsupported operating system. Grok-VIS is designed for Windows, Linux, and macOS.\")\ndef check_dependencies():\n    \"\"\"Check if all required dependencies are installed.\"\"\"",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "check_dependencies",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_dependencies():\n    \"\"\"Check if all required dependencies are installed.\"\"\"\n    required_packages = [\n        'joblib',\n        'numpy',\n        'sentence_transformers',\n        'spacy',\n        'pynvml',\n        'TTS',\n        'apscheduler',",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "check_spacy_model",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_spacy_model():\n    \"\"\"Check if the spaCy model is installed.\"\"\"\n    try:\n        import spacy\n        nlp = spacy.load(\"en_core_web_sm\")\n        logging.info(\"✅ spaCy model 'en_core_web_sm' is installed\")\n        return True\n    except ImportError:\n        logging.error(\"❌ spaCy is NOT installed\")\n        return False",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "check_grokvis_imports",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_grokvis_imports():\n    \"\"\"Check if the Grok-VIS package can be imported.\"\"\"\n    try:\n        import grokvis\n        logging.info(\"✅ grokvis package can be imported\")\n        # Check if core modules can be imported\n        from grokvis import core\n        logging.info(\"✅ grokvis.core module can be imported\")\n        return True\n    except ImportError as e:",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "check_file_permissions",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_file_permissions():\n    \"\"\"Check if the necessary files have the correct permissions.\"\"\"\n    try:\n        # Check if the main.py file exists and is readable\n        if os.path.isfile('../main.py'):\n            with open('../main.py', 'r') as f:\n                f.read(1)  # Try to read one byte\n            logging.info(\"✅ main.py is readable\")\n        else:\n            logging.error(\"❌ main.py does not exist\")",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "check_log_files",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def check_log_files():\n    \"\"\"Check if log files exist and are writable.\"\"\"\n    try:\n        # Check if the grokvis_errors.log file is writable\n        with open('../grokvis_errors.log', 'a') as f:\n            f.write('')\n        logging.info(\"✅ grokvis_errors.log is writable\")\n        return True\n    except FileNotFoundError:\n        # This is okay, the file will be created when needed",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "run_diagnosis",
        "kind": 2,
        "importPath": "tests.error_diagnosis",
        "description": "tests.error_diagnosis",
        "peekOfCode": "def run_diagnosis():\n    \"\"\"Run all diagnostic checks.\"\"\"\n    logging.info(\"Starting Grok-VIS error diagnosis...\")\n    # Check Python version\n    python_version_ok = check_python_version()\n    # Check system information\n    check_system_info()\n    # Check dependencies\n    dependencies_ok = check_dependencies()\n    # Check spaCy model",
        "detail": "tests.error_diagnosis",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "tests.run_tests",
        "description": "tests.run_tests",
        "peekOfCode": "def run_tests():\n    \"\"\"Run all tests in the tests directory.\"\"\"\n    # Discover and run all tests\n    test_loader = unittest.TestLoader()\n    test_suite = test_loader.discover(os.path.dirname(__file__), pattern=\"test_*.py\")\n    # Run the tests\n    test_runner = unittest.TextTestRunner(verbosity=2)\n    result = test_runner.run(test_suite)\n    # Return the number of failures and errors\n    return len(result.failures) + len(result.errors)",
        "detail": "tests.run_tests",
        "documentation": {}
    },
    {
        "label": "TestCore",
        "kind": 6,
        "importPath": "tests.test_core",
        "description": "tests.test_core",
        "peekOfCode": "class TestCore(unittest.TestCase):\n    \"\"\"Test cases for core functionality.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        # Any setup code goes here\n        pass\n    def tearDown(self):\n        \"\"\"Tear down test fixtures.\"\"\"\n        # Any cleanup code goes here\n        pass",
        "detail": "tests.test_core",
        "documentation": {}
    },
    {
        "label": "TestDependencies",
        "kind": 6,
        "importPath": "tests.test_dependencies",
        "description": "tests.test_dependencies",
        "peekOfCode": "class TestDependencies(unittest.TestCase):\n    \"\"\"Test cases for checking dependencies.\"\"\"\n    def test_required_packages(self):\n        \"\"\"Test that all required packages can be imported.\"\"\"\n        required_packages = [\n            'joblib',\n            'numpy',\n            'sentence_transformers',\n            'spacy',\n            'pynvml',",
        "detail": "tests.test_dependencies",
        "documentation": {}
    },
    {
        "label": "TestErrorHandling",
        "kind": 6,
        "importPath": "tests.test_errors",
        "description": "tests.test_errors",
        "peekOfCode": "class TestErrorHandling(unittest.TestCase):\n    \"\"\"Test cases for error handling.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        # Capture logging output\n        self.log_capture = StringIO()\n        self.log_handler = logging.StreamHandler(self.log_capture)\n        self.log_handler.setLevel(logging.ERROR)\n        logging.getLogger().addHandler(self.log_handler)\n        logging.getLogger().setLevel(logging.ERROR)",
        "detail": "tests.test_errors",
        "documentation": {}
    },
    {
        "label": "TestSpeech",
        "kind": 6,
        "importPath": "tests.test_speech",
        "description": "tests.test_speech",
        "peekOfCode": "class TestSpeech(unittest.TestCase):\n    \"\"\"Test cases for speech functionality.\"\"\"\n    def test_speech_module_import(self):\n        \"\"\"Test that the speech module can be imported.\"\"\"\n        try:\n            from grokvis import speech\n            self.assertTrue(True)\n        except ImportError as e:\n            self.fail(f\"Failed to import speech module: {e}\")\n    def test_tts_initialization(self):",
        "detail": "tests.test_speech",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\")\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": dict(color=\"Red\"),\n    \"B\": dict(color=\"Red\"),\n    \"C\": dict(color=\"Red\"),\n    \"D\": dict(color=\"Red\"),\n    \"E\": dict(color=\"Blue\"),\n    \"F\": dict(color=\"Blue\"),\n    \"G\": dict(color=\"Blue\"),\n    \"H\": dict(color=\"Blue\"),\n    \"I\": dict(color=\"Yellow\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for (i, layer) in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor (u, v, d) in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor (source, target) in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "reset_persona",
        "kind": 2,
        "importPath": "reset_persona",
        "description": "reset_persona",
        "peekOfCode": "def reset_persona():\n    \"\"\"Delete the persona_config.txt file if it exists.\"\"\"\n    if os.path.exists('persona_config.txt'):\n        try:\n            os.remove('persona_config.txt')\n            print(\"Persona choice reset successfully. GrokVIS will ask for a persona choice on next run.\")\n        except Exception as e:\n            print(f\"Error resetting persona choice: {e}\")\n    else:\n        print(\"No persona choice found. GrokVIS will ask for a persona choice on next run.\")",
        "detail": "reset_persona",
        "documentation": {}
    }
]